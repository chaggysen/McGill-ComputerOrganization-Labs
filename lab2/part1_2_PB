.global _start
_start:

// PUSHBUTTON ADDRESSES---------------------------------
.equ PB_DATA_ADDRESS, 0xFF200050

//Each bit in the Edgecapture register is set to by the parallel port when the corresponding key is pressed.
.equ PB_EDGE_ADDRESS, 0xFF20005C

//  An interrupt service routine can read this register to determine which key has been pressed.
.equ PB_INT_ADDRESS, 0xFF200058

// SWITCHES ADDRESSES------------------------------------
// Sider Switches Driver
.equ SW_MEMORY, 0xFF200040
// LEDs Driver
.equ LED_MEMORY, 0xFF200000

// LOOP
Loop:
BL read_slider_switches_ASM
BL write_LEDs_ASM
BL read_PB_data_ASM
BL PB_data_is_pressed_ASM
BL DISPLAY_VALUE
B Loop


// PUSHBUTTON SUBROUTINES--------------------------------

read_PB_data_ASM:
LDR R1, =PB_DATA_ADDRESS
LDR R2, [R1] // use R2 to store the index
BX LR

PB_data_is_pressed_ASM:
LDR R1, =PB_DATA_ADDRESS
LDR R3, [R1]
CMP R3, R2
MOVEQ R4, #1
MOVNE R4, #0
BX LR

read_PB_edgecp_ASM: 
LDR R4, =PB_EDGE_ADDRESS
LDR R0, [R4]
BX LR

PB_edgecp_is_pressed_ASM:
LDR R5, =PB_EDGE_ADDRESS
LDR R6, [R5]
CMP R6, R0
BEQ RETURN_1
BNE RETURN_0

RETURN_1:
MOV R0, #1
B END

RETURN_0:
MOV R0, #0
B END

END: BX LR

PB_clear_edgecp_ASM:
LDR R7, =PB_EDGE_ADDRESS
STR R0, [R7]
BX LR

enable_PB_INT_ASM:
LDR R8, =PB_INT_ADDRESS
STR R0, [R8]
BX LR

disable_PB_INT_ASM: 
LDR R9, =PB_INT_ADDRESS
STR R0, [R9]
BX LR

// SWITCHES SUBROUTINES-----------------------------------
// returns the state of slider switches in R0
/* The EQU directive gives a symbolic name to a numeric constant,
a register-relative value or a PC-relative value. */
read_slider_switches_ASM:
    LDR R1, =SW_MEMORY
    LDR R0, [R1] // use R0 to store the value 
    BX LR
// LEDs Driver
// writes the state of LEDs (On/Off state) in R0 to the LEDs memory location
write_LEDs_ASM:
    LDR R1, =LED_MEMORY
    STR R0, [R1] // // use R0 to store the value 
    BX LR

// HEX SUBROUTINES---------------------------------------
DISPLAY_VALUE:
CMP R4, #0 // if 0 then the push button is released
BXEQ LR
B DISPLAY_VALUE